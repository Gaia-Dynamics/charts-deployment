{{- if and .Values.rds .Values.rds.clusters }}
{{- range .Values.rds.clusters }}
---
# ============================================================================
# PushSecret - Sync RDS credentials to AWS Secrets Manager
# ============================================================================
# This resource runs in the TOOLS cluster and pushes Crossplane-generated
# RDS credentials to the QA/Prod AWS account's Secrets Manager.
#
# Flow:
#   1. Crossplane creates RDS and writes connection secret to tools cluster
#   2. PushSecret reads that secret and pushes to QA/Prod Secrets Manager
#   3. Apps in QA/Prod cluster pull via ExternalSecret
# ============================================================================

apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: {{ .name }}-push-secret
  namespace: {{ $.Values.global.namespace | default "crossplane-system" }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "15"  # Deploy after RDS cluster is ready
spec:
  refreshInterval: 30s  # Check for secret updates every 30 seconds

  # Use environment-specific ClusterSecretStore (aws-secretsmanager-qa or aws-secretsmanager-prod)
  # This provides cross-account access to write to QA/Prod Secrets Manager
  secretStoreRefs:
    - name: aws-secretsmanager-{{ $.Values.global.environment }}
      kind: ClusterSecretStore

  # Source: Read the Crossplane-generated connection secret
  selector:
    secret:
      name: {{ .name }}-connection-info

  # Template: Transform Crossplane keys to environment variables (customizable via secretKeyNames)
  template:
    data:
      {{ .secretKeyNames.host | default "POSTGRES_HOST" }}: {{ `"{{ .endpoint }}"` }}
      {{ .secretKeyNames.port | default "POSTGRES_PORT" }}: {{ `"{{ .port }}"` }}
      {{ .secretKeyNames.user | default "POSTGRES_USER" }}: {{ `"{{ .master_username }}"` }}
      {{ .secretKeyNames.password | default "POSTGRES_PASSWORD" }}: {{ `"{{ index . \"attribute.master_password\" }}"` }}
      {{ .secretKeyNames.database | default "POSTGRES_DB" }}: "{{ .databaseName | default "postgres" }}"
      {{ .secretKeyNames.readOnlyHost | default "POSTGRES_HOST_READ_ONLY" }}: {{ `"{{ .reader_endpoint }}"` }}

  # Destination: Push to AWS Secrets Manager
  # Note: AWS stores JSON objects as SecretBinary (this is normal AWS behavior)
  # The data is identical and fully usable by applications
  data:
    - match:
        secretKey: {{ .secretKeyNames.host | default "POSTGRES_HOST" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.host | default "POSTGRES_HOST" }}
    - match:
        secretKey: {{ .secretKeyNames.port | default "POSTGRES_PORT" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.port | default "POSTGRES_PORT" }}
    - match:
        secretKey: {{ .secretKeyNames.user | default "POSTGRES_USER" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.user | default "POSTGRES_USER" }}
    - match:
        secretKey: {{ .secretKeyNames.password | default "POSTGRES_PASSWORD" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.password | default "POSTGRES_PASSWORD" }}
    - match:
        secretKey: {{ .secretKeyNames.database | default "POSTGRES_DB" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.database | default "POSTGRES_DB" }}
    - match:
        secretKey: {{ .secretKeyNames.readOnlyHost | default "POSTGRES_HOST_READ_ONLY" }}
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}
          property: {{ .secretKeyNames.readOnlyHost | default "POSTGRES_HOST_READ_ONLY" }}

{{- end }}
{{- end }}

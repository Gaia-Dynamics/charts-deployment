{{- if and .Values.rds .Values.rds.clusters }}
{{- range .Values.rds.clusters }}
---
# ============================================================================
# PushSecret - Sync RDS credentials to AWS Secrets Manager
# ============================================================================
# This resource runs in the TOOLS cluster and pushes Crossplane-generated
# RDS credentials to the QA/Prod AWS account's Secrets Manager.
#
# Flow:
#   1. Crossplane creates RDS and writes connection secret to tools cluster
#   2. PushSecret reads that secret and pushes to QA/Prod Secrets Manager
#   3. Apps in QA/Prod cluster pull via ExternalSecret
# ============================================================================

apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: {{ .name }}-push-secret
  namespace: {{ $.Values.global.namespace | default "crossplane-system" }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
  annotations:
    argocd.argoproj.io/sync-wave: "15"  # Deploy after RDS cluster is ready
spec:
  refreshInterval: 30s  # Check for secret updates every 30 seconds

  # Use environment-specific ClusterSecretStore (aws-secretsmanager-qa or aws-secretsmanager-prod)
  # This provides cross-account access to write to QA/Prod Secrets Manager
  secretStoreRefs:
    - name: aws-secretsmanager-{{ $.Values.global.environment }}
      kind: ClusterSecretStore

  # Source: Read the Crossplane-generated connection secret
  selector:
    secret:
      name: {{ .name }}-connection-info

  # Template: Transform Crossplane secret into a JSON secret for AWS Secrets Manager
  # This creates a single JSON string with all connection details
  template:
    templateFrom:
      - secret:
          name: {{ .name }}-connection-info
          items:
            - key: endpoint
            - key: port
            - key: master_username
            - key: attribute.master_password
            - key: reader_endpoint
    data:
      # Build JSON string with all PostgreSQL connection details
      secretString: |
        {
          "POSTGRES_HOST": "{{ `{{ .endpoint }}` }}",
          "POSTGRES_PORT": "{{ `{{ .port }}` }}",
          "POSTGRES_USER": "{{ `{{ .master_username }}` }}",
          "POSTGRES_PASSWORD": "{{ `{{ index . "attribute.master_password" }}` }}",
          "POSTGRES_DB": {{ .databaseName | default "postgres" | quote }},
          "POSTGRES_HOST_READ_ONLY": "{{ `{{ .reader_endpoint }}` }}"
        }

  # Destination: Push the JSON secret to AWS Secrets Manager
  # Path: rds/{environment}/{cluster-name}
  data:
    - match:
        secretKey: secretString
        remoteRef:
          remoteKey: {{ $.Values.global.environment }}/rds/{{ .name }}

{{- end }}
{{- end }}

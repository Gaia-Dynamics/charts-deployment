{{- if and .Values.rds .Values.rds.clusters }}
{{- range .Values.rds.clusters }}

{{- if not .vpcSecurityGroupIds }}
---
# Auto-created Security Group for RDS
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroup
metadata:
  name: {{ .name }}-sg
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}
    description: {{ printf "Security group for %s Aurora cluster" .name }}
    name: {{ .name }}-sg
    {{- if .vpcId }}
    vpcId: {{ .vpcId }}
    {{- else if eq $.Values.global.environment "qa" }}
    vpcId: vpc-0c6dffd97461de14f
    {{- else if eq $.Values.global.environment "prod" }}
    vpcId: vpc-0e43cfc91bc74be9e
    {{- else }}
      {{- fail "vpcId required when auto-creating security group or provide vpcSecurityGroupIds" }}
    {{- end }}
    tags:
      Name: {{ .name }}-sg
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      {{- range $key, $value := .tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

---
# Security Group Rule - Allow PostgreSQL/MySQL from app security group
apiVersion: ec2.aws.upbound.io/v1beta1
kind: SecurityGroupIngressRule
metadata:
  name: {{ .name }}-sg-rule
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}
    description: {{ printf "Allow database access to %s from application" .name }}
    fromPort: {{ .port | default 5432 }}
    toPort: {{ .port | default 5432 }}
    ipProtocol: tcp
    securityGroupIdSelector:
      matchLabels:
        app.kubernetes.io/name: {{ .name }}
    {{- if eq $.Values.global.environment "qa" }}
    referencedSecurityGroupId: sg-023605daa63299b42
    {{- else if eq $.Values.global.environment "prod" }}
    referencedSecurityGroupId: sg-004477da6d81e6cdf
    {{- else }}
      {{- fail "Unknown environment - cannot determine source security group" }}
    {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

{{- end }}

---
# DB Subnet Group
apiVersion: rds.aws.upbound.io/v1beta1
kind: SubnetGroups
metadata:
  name: {{ .name }}-subnet-group
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}
    description: {{ printf "Subnet group for %s Aurora cluster" .name }}
    {{- if .subnetIds }}
    subnetIds:
    {{- range .subnetIds }}
      - {{ . }}
    {{- end }}
    {{- else if eq $.Values.global.environment "qa" }}
    subnetIds:
      - subnet-06b3bc451435c90c3
      - subnet-03c3b3c8377cb3f88
    {{- else if eq $.Values.global.environment "prod" }}
    subnetIds:
      - subnet-0bc4961ea0f8b699d
      - subnet-0e0efa4896e447362
    {{- else }}
      {{- fail "subnetIds is required for RDS cluster or use qa/prod environment" }}
    {{- end }}
    tags:
      Name: {{ .name }}-subnet-group
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      {{- range $key, $value := .tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

---
# DB Cluster Parameter Group
apiVersion: rds.aws.upbound.io/v1beta1
kind: ClusterParameterGroups
metadata:
  name: {{ .name }}-cluster-params
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}
    description: {{ printf "Cluster parameter group for %s" .name }}
    {{- if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
    family: {{ .parameterGroupFamily | default "aurora-postgresql16" }}
    {{- else if eq .engine "aurora-mysql" }}
    family: {{ .parameterGroupFamily | default "aurora-mysql8.0" }}
    {{- else }}
    family: {{ .parameterGroupFamily }}
    {{- end }}
    {{- if .clusterParameters }}
    parameter:
    {{- range .clusterParameters }}
      - name: {{ .name }}
        value: {{ .value | quote }}
        {{- if .applyMethod }}
        applyMethod: {{ .applyMethod }}
        {{- end }}
    {{- end }}
    {{- end }}
    tags:
      Name: {{ .name }}-cluster-params
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      {{- range $key, $value := .tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

---
# DB Parameter Group (for instances)
apiVersion: rds.aws.upbound.io/v1beta1
kind: ParameterGroups
metadata:
  name: {{ .name }}-instance-params
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}
    description: {{ printf "Instance parameter group for %s" .name }}
    {{- if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
    family: {{ .parameterGroupFamily | default "aurora-postgresql16" }}
    {{- else if eq .engine "aurora-mysql" }}
    family: {{ .parameterGroupFamily | default "aurora-mysql8.0" }}
    {{- else }}
    family: {{ .parameterGroupFamily }}
    {{- end }}
    {{- if .instanceParameters }}
    parameter:
    {{- range .instanceParameters }}
      - name: {{ .name }}
        value: {{ .value | quote }}
        {{- if .applyMethod }}
        applyMethod: {{ .applyMethod }}
        {{- end }}
    {{- end }}
    {{- end }}
    tags:
      Name: {{ .name }}-instance-params
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      {{- range $key, $value := .tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

---
# Aurora DB Cluster
apiVersion: rds.aws.upbound.io/v1beta1
kind: Cluster
metadata:
  name: {{ .name }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}

    # Engine configuration
    engine: {{ .engine | default "aurora-postgresql" }}
    {{- if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
    engineVersion: {{ .engineVersion | default "16.4" }}
    {{- else if eq .engine "aurora-mysql" }}
    engineVersion: {{ .engineVersion | default "8.0.mysql_aurora.3.07.1" }}
    {{- else }}
    engineVersion: {{ .engineVersion }}
    {{- end }}
    engineMode: {{ .engineMode | default "provisioned" }}

    # Database configuration
    databaseName: {{ .databaseName | default "postgres" }}
    masterUsername: {{ .masterUsername | default "postgres" }}

    # Auto-generate password and store in connection info secret
    autoGeneratePassword: true
    masterPasswordSecretRef:
      name: {{ .name }}-connection-info
      namespace: {{ $.Values.global.namespace | default "crossplane-system" }}
      key: password

    # Network configuration
    dbSubnetGroupNameSelector:
      matchLabels:
        app.kubernetes.io/name: {{ .name }}

    {{- if .vpcSecurityGroupIds }}
    vpcSecurityGroupIds:
    {{- range .vpcSecurityGroupIds }}
      - {{ . }}
    {{- end }}
    {{- else }}
    # Use auto-created security group
    vpcSecurityGroupIdSelector:
      matchLabels:
        app.kubernetes.io/name: {{ .name }}
    {{- end }}

    # Parameter groups
    dbClusterParameterGroupNameSelector:
      matchLabels:
        app.kubernetes.io/name: {{ .name }}

    # Backup configuration
    backupRetentionPeriod: {{ .backupRetentionPeriod | default 7 }}
    preferredBackupWindow: {{ .preferredBackupWindow | default "03:00-04:00" }}
    preferredMaintenanceWindow: {{ .preferredMaintenanceWindow | default "mon:04:00-mon:05:00" }}

    {{- if .skipFinalSnapshot }}
    skipFinalSnapshot: {{ .skipFinalSnapshot }}
    {{- else }}
    skipFinalSnapshot: false
    finalSnapshotIdentifier: {{ .name }}-final-snapshot
    {{- end }}

    # Storage encryption
    {{- if .kmsKeyId }}
    storageEncrypted: true
    kmsKeyId: {{ .kmsKeyId }}
    {{- else }}
    storageEncrypted: {{ .storageEncrypted | default true }}
    {{- end }}

    # Monitoring and logging
    {{- if .enableCloudwatchLogsExports }}
    enabledCloudwatchLogsExports:
    {{- range .enableCloudwatchLogsExports }}
      - {{ . }}
    {{- end }}
    {{- else if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
    enabledCloudwatchLogsExports:
      - postgresql
    {{- end }}

    # Availability
    {{- if .availabilityZones }}
    availabilityZones:
    {{- range .availabilityZones }}
      - {{ . }}
    {{- end }}
    {{- end }}

    # Deletion protection
    deletionProtection: {{ .deletionProtection | default false }}

    # Copy tags to snapshots
    copyTagsToSnapshot: {{ .copyTagsToSnapshot | default true }}

    # Serverless v2 scaling
    {{- if .serverlessV2ScalingConfiguration }}
    serverlessv2ScalingConfiguration:
      - minCapacity: {{ .serverlessV2ScalingConfiguration.minCapacity | default 0.5 }}
        maxCapacity: {{ .serverlessV2ScalingConfiguration.maxCapacity | default 1 }}
    {{- end }}

    # Tags
    tags:
      Name: {{ .name }}
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      {{- range $key, $value := .tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}

  # Write connection info to secret
  writeConnectionSecretToRef:
    name: {{ .name }}-connection-info
    namespace: {{ $.Values.global.namespace | default "crossplane-system" }}

  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}

{{- $cluster := . }}
{{- $instanceCount := .instanceCount | default 1 }}
{{- range $index := until (int $instanceCount) }}
---
# Aurora DB Instance {{ $index }}
apiVersion: rds.aws.upbound.io/v1beta1
kind: ClusterInstances
metadata:
  name: {{ $cluster.name }}-instance-{{ $index }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ $cluster.name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
    cluster: {{ $cluster.name }}
    instance-index: "{{ $index }}"
spec:
  deletionPolicy: {{ $cluster.deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    region: {{ $.Values.global.region }}

    # Cluster association
    clusterIdentifierSelector:
      matchLabels:
        app.kubernetes.io/name: {{ $cluster.name }}

    # Engine
    engine: {{ $cluster.engine | default "aurora-postgresql" }}

    # Instance class
    {{- if $cluster.instanceClass }}
    instanceClass: {{ $cluster.instanceClass }}
    {{- else if eq ($cluster.instanceType | default "provisioned") "serverless" }}
    instanceClass: db.serverless
    {{- else }}
    instanceClass: db.t4g.medium
    {{- end }}

    # Parameter group
    dbParameterGroupNameSelector:
      matchLabels:
        app.kubernetes.io/name: {{ $cluster.name }}

    # Public accessibility
    publiclyAccessible: {{ $cluster.publiclyAccessible | default false }}

    # Monitoring
    {{- if $cluster.monitoringInterval }}
    monitoringInterval: {{ $cluster.monitoringInterval }}
    {{- if $cluster.monitoringRoleArn }}
    monitoringRoleArn: {{ $cluster.monitoringRoleArn }}
    {{- end }}
    {{- end }}

    # Performance Insights
    {{- if $cluster.enablePerformanceInsights }}
    performanceInsightsEnabled: {{ $cluster.enablePerformanceInsights }}
    {{- if $cluster.performanceInsightsKmsKeyId }}
    performanceInsightsKmsKeyId: {{ $cluster.performanceInsightsKmsKeyId }}
    {{- end }}
    {{- if $cluster.performanceInsightsRetentionPeriod }}
    performanceInsightsRetentionPeriod: {{ $cluster.performanceInsightsRetentionPeriod }}
    {{- end }}
    {{- end }}

    # Auto minor version upgrade
    autoMinorVersionUpgrade: {{ $cluster.autoMinorVersionUpgrade | default true }}

    # Preferred maintenance window
    preferredMaintenanceWindow: {{ $cluster.preferredMaintenanceWindow | default "mon:04:00-mon:05:00" }}

    # Promotion tier (for failover priority)
    promotionTier: {{ $index }}

    # Availability zone (optional)
    {{- if $cluster.availabilityZones }}
    {{- if lt $index (len $cluster.availabilityZones) }}
    availabilityZone: {{ index $cluster.availabilityZones $index }}
    {{- end }}
    {{- end }}

    # Tags
    tags:
      Name: {{ $cluster.name }}-instance-{{ $index }}
      Environment: {{ $.Values.global.environment }}
      ManagedBy: {{ $.Values.global.tags.managedBy | default "crossplane" }}
      Department: {{ $.Values.global.tags.department | default "engineering" }}
      Service: {{ $.Values.global.tags.service | default "gaia" }}
      Cluster: {{ $cluster.name }}
      InstanceIndex: "{{ $index }}"
      {{- range $key, $value := $cluster.tags }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}
{{- end }}

{{- if .createPolicy }}
---
# IAM Policy for RDS access
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  name: {{ .name }}-rds-policy
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  deletionPolicy: {{ .deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    name: {{ .name }}-rds-policy
    description: {{ printf "Policy for RDS cluster %s managed by Crossplane" .name }}
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RDSConnect",
            "Effect": "Allow",
            "Action": [
              "rds-db:connect"
            ],
            "Resource": "arn:aws:rds-db:{{ $.Values.global.region }}:{{ $.Values.global.accountId }}:dbuser:*/*"
          },
          {
            "Sid": "RDSDescribe",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances"
            ],
            "Resource": [
              "arn:aws:rds:{{ $.Values.global.region }}:{{ $.Values.global.accountId }}:cluster:{{ .name }}",
              "arn:aws:rds:{{ $.Values.global.region }}:{{ $.Values.global.accountId }}:db:{{ .name }}-*"
            ]
          }
          {{- if .kmsKeyId }},
          {
            "Sid": "KMSAccess",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:DescribeKey"
            ],
            "Resource": "{{ .kmsKeyId }}"
          }
          {{- end }}
        ]
      }
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}
{{- end }}

{{- if and .createPolicy .attachToRoles }}
{{- $cluster := . }}
{{- range $index, $role := .attachToRoles }}
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: {{ $cluster.name }}-role-attachment-{{ $index }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ $cluster.name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
    purpose: irsa-attachment
spec:
  deletionPolicy: {{ $cluster.deletionPolicy | default $.Values.global.deletionPolicy }}
  forProvider:
    policyArnSelector:
      matchLabels:
        app.kubernetes.io/name: {{ $cluster.name }}
    role: {{ $role }}
  providerConfigRef:
    name: {{ $.Values.global.providerConfig }}
{{- end }}
{{- else if and (not .createPolicy) .attachToRoles }}
  {{- fail printf "Error: attachToRoles is set for cluster %s but createPolicy is false. Set createPolicy: true to use attachToRoles." .name }}
{{- end }}

{{- end }}
{{- end }}

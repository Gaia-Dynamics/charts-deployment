{{- if and .Values.rds .Values.rds.clusters }}
{{- range .Values.rds.clusters }}
{{- if .syncToSecretsManager }}
---
# Enhanced connection secret with all details
# The Cluster resource writes connection info to {name}-connection-info
# We'll enhance it with additional details and push to Secrets Manager
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}-connection-complete
  namespace: {{ $.Values.global.namespace | default "crossplane-system" }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
type: Opaque
stringData:
  {{- if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
  POSTGRES_HOST: {{ .name }}.cluster-changeme.{{ $.Values.global.region }}.rds.amazonaws.com
  POSTGRES_PORT: "{{ .port | default 5432 }}"
  POSTGRES_DB: {{ .databaseName | default "postgres" }}
  POSTGRES_USER: {{ .masterUsername | default "postgres" }}
  POSTGRES_ENDPOINT: {{ .name }}.cluster-changeme.{{ $.Values.global.region }}.rds.amazonaws.com:{{ .port | default 5432 }}
  {{- else if eq .engine "aurora-mysql" }}
  MYSQL_HOST: {{ .name }}.cluster-changeme.{{ $.Values.global.region }}.rds.amazonaws.com
  MYSQL_PORT: "{{ .port | default 3306 }}"
  MYSQL_DATABASE: {{ .databaseName | default "mysql" }}
  MYSQL_USER: {{ .masterUsername | default "admin" }}
  MYSQL_ENDPOINT: {{ .name }}.cluster-changeme.{{ $.Values.global.region }}.rds.amazonaws.com:{{ .port | default 3306 }}
  {{- end }}

---
# Push complete connection info to AWS Secrets Manager
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: {{ .name }}-connection-push
  namespace: {{ $.Values.global.namespace | default "crossplane-system" }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
spec:
  refreshInterval: 10s
  secretStoreRefs:
    - name: {{ .syncToSecretsManager.secretStoreRef | default "secretstore" }}
      kind: {{ .syncToSecretsManager.secretStoreKind | default "ClusterSecretStore" }}
  selector:
    secret:
      name: {{ .name }}-connection-complete
  template:
    # Merge password and endpoint from the Crossplane-generated secret
    mergePolicy: Merge
    data:
      {{- if eq (.engine | default "aurora-postgresql") "aurora-postgresql" }}
      POSTGRES_PASSWORD: "{{ `{{ .password }}` }}"
      POSTGRES_HOST: "{{ `{{ .endpoint }}` }}"
      DATABASE_URL: "postgresql://{{ .masterUsername | default "postgres" }}:{{ `{{ .password }}` }}@{{ `{{ .endpoint }}` }}/{{ .databaseName | default "postgres" }}"
      {{- else if eq .engine "aurora-mysql" }}
      MYSQL_PASSWORD: "{{ `{{ .password }}` }}"
      MYSQL_HOST: "{{ `{{ .endpoint }}` }}"
      DATABASE_URL: "mysql://{{ .masterUsername | default "admin" }}:{{ `{{ .password }}` }}@{{ `{{ .endpoint }}` }}/{{ .databaseName | default "mysql" }}"
      {{- end }}
  data:
    - match:
        secretKey: ".*"
        remoteRef:
          remoteKey: {{ .syncToSecretsManager.remoteKeyPrefix | default (printf "%s/%s" $.Values.global.environment .name) }}

{{- if .syncToSecretsManager.createExternalSecretForApps }}
---
# ExternalSecret that apps can reference to pull DB credentials
apiVersion: external-secrets.io/v1alpha1
kind: ExternalSecret
metadata:
  name: {{ .name }}-db-credentials
  namespace: {{ .syncToSecretsManager.appNamespace | default "default" }}
  labels:
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/name: {{ .name }}
    app.kubernetes.io/managed-by: crossplane
    environment: {{ $.Values.global.environment }}
    db-credentials: "true"
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: {{ .syncToSecretsManager.secretStoreKind | default "ClusterSecretStore" }}
    name: {{ .syncToSecretsManager.secretStoreRef | default "secretstore" }}
  target:
    name: {{ .name }}-db-credentials
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: {{ .syncToSecretsManager.remoteKeyPrefix | default (printf "%s/%s" $.Values.global.environment .name) }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}
